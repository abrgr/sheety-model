{"version":3,"sources":["../../src/lib/sheet.js"],"names":["SheetRecord","tabsById","coerceTabsById","map","tab","Sheet","params","isIterable","get","tabs","groupBy","t","first","valueSeq","flatMap","rows","row","rowIdx","cell","colIdx","of","cellRef","getIn","getCellByRef","tabId","cellRefRange","xform","start","end","cols","vals","r","push","c","merge"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,cAAc,uBAAO;AACzBC,YAAU;AADe,CAAP,EAEjB,OAFiB,CAApB;;AAIA,SAASC,cAAT,CAAwBD,QAAxB,EAAkC;AAChC,SAAO,mBAAQA,QAAR,EAAkBE,GAAlB,CAAsB;AAAA,WAAO,kBAAQC,GAAR,CAAP;AAAA,GAAtB,CAAP;AACD;;IAEoBC,K;;;AACnB,iBAAYC,MAAZ,EAAoB;AAAA;;AAAA,eACO,oBAASC,UAAT,CAAoBD,MAApB,IACA,CAACA,OAAOE,GAAP,CAAW,MAAX,CAAD,EAAqBF,OAAOE,GAAP,CAAW,UAAX,CAArB,CADA,GAEA,CAACF,OAAOG,IAAR,EAAcH,OAAOL,QAArB,CAHP;AAAA;AAAA,QACXQ,IADW;AAAA,QACLR,QADK;;AAAA,yGAKd,CAACA,QAAD,IAAa,CAAC,CAACQ,IAAjB,GACE;AACAR,gBAAUC,eAAe,oBAASO,IAAT,EAAeC,OAAf,CAAuB;AAAA,eAAKC,EAAEH,GAAF,CAAM,IAAN,CAAL;AAAA,OAAvB,EAAyCL,GAAzC,CAA6C;AAAA,eAAKQ,EAAEC,KAAF,EAAL;AAAA,OAA7C,CAAf;AADV,KADF,GAGI;AACFX,gBAAUC,eAAeD,QAAf;AADR,KARY;AAYnB;;AAED;;;;;;;kCAGc;AACZ,aAAO,KAAKA,QAAL,CAAcY,QAAd,GAAyBC,OAAzB,CAAiC;AAAA,eACtCV,IAAIW,IAAJ,CAASD,OAAT,CAAiB,UAACE,GAAD,EAAMC,MAAN;AAAA,iBACfD,IAAIb,GAAJ,CAAQ,UAACe,IAAD,EAAOC,MAAP;AAAA,mBAAkB,kBAAQC,EAAR,CAAWhB,GAAX,EAAgBa,MAAhB,EAAwBE,MAAxB,CAAlB;AAAA,WAAR,CADe;AAAA,SAAjB,CADsC;AAAA,OAAjC,CAAP;AAKD;;AAED;;;;;;4BAGQE,O,EAAS;AACf,UAAMjB,MAAM,KAAKkB,KAAL,CAAW,CAAC,UAAD,EAAaD,QAAQb,GAAR,CAAY,OAAZ,CAAb,CAAX,CAAZ;AACA,aAAOJ,OAAOA,IAAImB,YAAJ,CAAiBF,OAAjB,CAAd;AACD;;;2BAEMG,K,EAAO;AACZ,aAAO,KAAKF,KAAL,CAAW,CAAC,UAAD,EAAaE,KAAb,CAAX,CAAP;AACD;;;6BAEQC,Y,EAAcC,K,EAAO;AAC5B,UAAMC,QAAQF,aAAajB,GAAb,CAAiB,OAAjB,CAAd;AACA,UAAMoB,MAAMH,aAAajB,GAAb,CAAiB,KAAjB,CAAZ;AACA,UAAMJ,MAAMuB,MAAMnB,GAAN,CAAU,OAAV,CAAZ;AACA,UAAMO,OAAOa,IAAIpB,GAAJ,CAAQ,QAAR,IAAoBmB,MAAMnB,GAAN,CAAU,QAAV,CAAjC;AACA,UAAMqB,OAAOD,IAAIpB,GAAJ,CAAQ,QAAR,IAAoBmB,MAAMnB,GAAN,CAAU,QAAV,CAAjC;;AAEA,UAAMsB,OAAO,EAAb;AACA,WAAM,IAAIC,IAAI,CAAd,EAAiBA,KAAKhB,IAAtB,EAA4B,EAAEgB,CAA9B,EAAkC;AAChCD,aAAKE,IAAL,CAAU,EAAV;AACA,aAAM,IAAIC,IAAI,CAAd,EAAiBA,KAAKJ,IAAtB,EAA4B,EAAEI,CAA9B,EAAkC;AAChCH,eAAKC,CAAL,EAAQE,CAAR,IAAaP,MAAMC,MAAMO,KAAN,CAAY,EAACjB,QAAQc,CAAT,EAAYZ,QAAQc,CAApB,EAAZ,CAAN,CAAb;AACD;AACF;;AAED,aAAOH,IAAP;AACD;;;;EAtDgC9B,W;;kBAAdK,K","file":"sheet.js","sourcesContent":["import { Record, Map, List, Iterable } from 'immutable';\nimport Tab from './tab';\nimport CellRef from './cell-ref';\n\nconst SheetRecord = Record({\n  tabsById: new Map()\n}, 'Sheet');\n\nfunction coerceTabsById(tabsById) {\n  return new Map(tabsById).map(tab => new Tab(tab));\n}\n\nexport default class Sheet extends SheetRecord {\n  constructor(params) {\n    const [tabs, tabsById] = Iterable.isIterable(params)\n                           ? [params.get('tabs'), params.get('tabsById')]\n                           : [params.tabs, params.tabsById];\n    super(\n      ( !tabsById && !!tabs )\n      ? {\n        tabsById: coerceTabsById(new List(tabs).groupBy(t => t.get('id')).map(t => t.first()))\n      } : {\n        tabsById: coerceTabsById(tabsById)\n      }\n    );\n  }\n\n  /**\n   * Return all cell references for all tabs.\n   **/\n  allCellRefs() {\n    return this.tabsById.valueSeq().flatMap(tab => (\n      tab.rows.flatMap((row, rowIdx) => (\n        row.map((cell, colIdx) => CellRef.of(tab, rowIdx, colIdx))\n      ))\n    ));\n  }\n\n  /**\n   * Returns the sheety-model Cell for the given cell ref.\n   **/\n  getCell(cellRef) {\n    const tab = this.getIn(['tabsById', cellRef.get('tabId')]);\n    return tab && tab.getCellByRef(cellRef);\n  }\n\n  getTab(tabId) {\n    return this.getIn(['tabsById', tabId]);\n  }\n\n  mapRange(cellRefRange, xform) {\n    const start = cellRefRange.get('start');\n    const end = cellRefRange.get('end');\n    const tab = start.get('tabId');\n    const rows = end.get('rowIdx') - start.get('rowIdx');\n    const cols = end.get('colIdx') - start.get('colIdx');\n\n    const vals = [];\n    for ( let r = 0; r <= rows; ++r ) {\n      vals.push([]);\n      for ( let c = 0; c <= cols; ++c ) {\n        vals[r][c] = xform(start.merge({rowIdx: r, colIdx: c}));\n      }\n    }\n\n    return vals;\n  }\n}\n"]}