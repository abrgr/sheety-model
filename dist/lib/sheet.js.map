{"version":3,"sources":["../../src/lib/sheet.js"],"names":["SheetRecord","tabsById","coercer","bind","map","tab","Sheet","params","tabs","isIterable","get","groupBy","t","first","valueSeq","flatMap","rows","row","rowIdx","cell","colIdx","of","cellRef","getIn","getCellByRef","tabId","cellRefRange","xform","mapCellRefs"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,cAAc,uBAAO;AACzBC,YAAU;AADe,CAAP,EAEjB,OAFiB,CAApB;;AAIA,IAAMC,UAAU,iBAAOC,IAAP,CAAY,IAAZ,EAAkB,mBAAQ;AACxCF,YAAU;AAAA,WAAY,mBAAQA,SAAR,EAAkBG,GAAlB,CAAsB;AAAA,aAAO,kBAAQC,GAAR,CAAP;AAAA,KAAtB,CAAZ;AAAA;AAD8B,CAAR,CAAlB,CAAhB;;IAIqBC,K;;;AACnB,iBAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAMC,OAAOD,UAAU,oBAASE,UAAT,CAAoBF,MAApB,CAAV,GACAA,OAAOG,GAAP,CAAW,MAAX,CADA,GAEAH,OAAOC,IAFpB;;AADkB,yGAMhBN,QACEM,OACI;AACAP,gBAAU,oBAASO,IAAT,EAAeG,OAAf,CAAuB;AAAA,eAAKC,EAAEF,GAAF,CAAM,IAAN,CAAL;AAAA,OAAvB,EACeN,GADf,CACmB;AAAA,eAAKQ,EAAEC,KAAF,EAAL;AAAA,OADnB;AADV,KADJ,GAIMN,MALR,CANgB;AAcnB;;AAED;;;;;;;kCAGc;AACZ,aAAO,KAAKN,QAAL,CAAca,QAAd,GAAyBC,OAAzB,CAAiC;AAAA,eACtCV,IAAIW,IAAJ,CAASD,OAAT,CAAiB,UAACE,GAAD,EAAMC,MAAN;AAAA,iBACfD,IAAIb,GAAJ,CAAQ,UAACe,IAAD,EAAOC,MAAP;AAAA,mBAAkB,kBAAQC,EAAR,CAAWhB,GAAX,EAAgBa,MAAhB,EAAwBE,MAAxB,CAAlB;AAAA,WAAR,CADe;AAAA,SAAjB,CADsC;AAAA,OAAjC,CAAP;AAKD;;AAED;;;;;;4BAGQE,O,EAAS;AACf,UAAMjB,MAAM,KAAKkB,KAAL,CAAW,CAAC,UAAD,EAAaD,QAAQZ,GAAR,CAAY,OAAZ,CAAb,CAAX,CAAZ;AACA,aAAOL,OAAOA,IAAImB,YAAJ,CAAiBF,OAAjB,CAAd;AACD;;;2BAEMG,K,EAAO;AACZ,aAAO,KAAKF,KAAL,CAAW,CAAC,UAAD,EAAaE,KAAb,CAAX,CAAP;AACD;;;6BAEQC,Y,EAAcC,K,EAAO;AAC5B,aAAOD,aAAaE,WAAb,CAAyBD,KAAzB,CAAP;AACD;;;;EA1CgC3B,W;;kBAAdM,K","file":"sheet.js","sourcesContent":["import { Record, Map, List, Iterable } from 'immutable';\nimport Tab from './tab';\nimport CellRef from './cell-ref';\nimport coerce from './coerce';\n\nconst SheetRecord = Record({\n  tabsById: new Map()\n}, 'Sheet');\n\nconst coercer = coerce.bind(null, new Map({\n  tabsById: tabsById => new Map(tabsById).map(tab => new Tab(tab))\n}));\n\nexport default class Sheet extends SheetRecord {\n  constructor(params) {\n    const tabs = params && Iterable.isIterable(params)\n               ? params.get('tabs')\n               : params.tabs;\n\n    super(\n      coercer(\n        tabs\n          ? {\n            tabsById: new List(tabs).groupBy(t => t.get('id'))\n                                    .map(t => t.first())\n          } : params\n      )\n    );\n  }\n\n  /**\n   * Return all cell references for all tabs.\n   **/\n  allCellRefs() {\n    return this.tabsById.valueSeq().flatMap(tab => (\n      tab.rows.flatMap((row, rowIdx) => (\n        row.map((cell, colIdx) => CellRef.of(tab, rowIdx, colIdx))\n      ))\n    ));\n  }\n\n  /**\n   * Returns the sheety-model Cell for the given cell ref.\n   **/\n  getCell(cellRef) {\n    const tab = this.getIn(['tabsById', cellRef.get('tabId')]);\n    return tab && tab.getCellByRef(cellRef);\n  }\n\n  getTab(tabId) {\n    return this.getIn(['tabsById', tabId]);\n  }\n\n  mapRange(cellRefRange, xform) {\n    return cellRefRange.mapCellRefs(xform);\n  }\n}\n"]}