{"version":3,"sources":["../../src/lib/sheet.js"],"names":["SheetRecord","providerId","providerUrl","title","tabsById","coercer","bind","map","tab","Sheet","params","tabs","isIterable","get","merge","groupBy","t","first","valueSeq","flatMap","rows","row","rowIdx","cell","colIdx","of","cellRef","getIn","getCellByRef","tabId","cellRefRange","xform","mapCellRefs"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,cAAc,uBAAO;AACzBC,cAAY,IADa;AAEzBC,eAAa,IAFY;AAGzBC,SAAO,IAHkB;AAIzBC,YAAU;AAJe,CAAP,EAKjB,OALiB,CAApB;;AAOA,IAAMC,UAAU,iBAAOC,IAAP,CAAY,IAAZ,EAAkB,mBAAQ;AACxCL,cAAY;AAAA,WAAc,CAAC,CAACA,WAAF,GAAe,KAAKA,WAApB,GAAiC,IAA/C;AAAA,GAD4B;AAExCC,eAAa;AAAA,WAAe,CAAC,CAACA,YAAF,GAAgB,KAAKA,YAArB,GAAmC,IAAlD;AAAA,GAF2B;AAGxCC,SAAO;AAAA,WAAS,CAAC,CAACA,MAAF,GAAU,KAAKA,MAAf,GAAuB,IAAhC;AAAA,GAHiC;AAIxCC,YAAU;AAAA,WAAY,mBAAQA,SAAR,EAAkBG,GAAlB,CAAsB;AAAA,aAAO,kBAAQC,GAAR,CAAP;AAAA,KAAtB,CAAZ;AAAA;AAJ8B,CAAR,CAAlB,CAAhB;;IAOqBC,K;;;AACnB,iBAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAMC,OAAOD,UAAU,oBAASE,UAAT,CAAoBF,MAApB,CAAV,GACAA,OAAOG,GAAP,CAAW,MAAX,CADA,GAEAH,OAAOC,IAFpB;;AADkB,yGAMhBN,QACEM,OACI,mBAAQD,MAAR,EAAgBI,KAAhB,CAAsB;AACtBV,gBAAU,oBAASO,IAAT,EAAeI,OAAf,CAAuB;AAAA,eAAKC,EAAEH,GAAF,CAAM,IAAN,CAAL;AAAA,OAAvB,EACeN,GADf,CACmB;AAAA,eAAKS,EAAEC,KAAF,EAAL;AAAA,OADnB;AADY,KAAtB,CADJ,GAIOP,MALT,CANgB;AAcnB;;AAED;;;;;;;kCAGc;AACZ,aAAO,KAAKN,QAAL,CAAcc,QAAd,GAAyBC,OAAzB,CAAiC;AAAA,eACtCX,IAAIY,IAAJ,CAASD,OAAT,CAAiB,UAACE,GAAD,EAAMC,MAAN;AAAA,iBACfD,IAAId,GAAJ,CAAQ,UAACgB,IAAD,EAAOC,MAAP;AAAA,mBAAkB,kBAAQC,EAAR,CAAWjB,GAAX,EAAgBc,MAAhB,EAAwBE,MAAxB,CAAlB;AAAA,WAAR,CADe;AAAA,SAAjB,CADsC;AAAA,OAAjC,CAAP;AAKD;;AAED;;;;;;4BAGQE,O,EAAS;AACf,UAAMlB,MAAM,KAAKmB,KAAL,CAAW,CAAC,UAAD,EAAaD,QAAQb,GAAR,CAAY,OAAZ,CAAb,CAAX,CAAZ;AACA,aAAOL,OAAOA,IAAIoB,YAAJ,CAAiBF,OAAjB,CAAd;AACD;;;2BAEMG,K,EAAO;AACZ,aAAO,KAAKF,KAAL,CAAW,CAAC,UAAD,EAAaE,KAAb,CAAX,CAAP;AACD;;;6BAEQC,Y,EAAcC,K,EAAO;AAC5B,aAAOD,aAAaE,WAAb,CAAyBD,KAAzB,CAAP;AACD;;;;EA1CgC/B,W;;kBAAdS,K","file":"sheet.js","sourcesContent":["import { Record, Map, List, Iterable } from 'immutable';\nimport Tab from './tab';\nimport CellRef from './cell-ref';\nimport coerce from './coerce';\n\nconst SheetRecord = Record({\n  providerId: null,\n  providerUrl: null,\n  title: null,\n  tabsById: new Map()\n}, 'Sheet');\n\nconst coercer = coerce.bind(null, new Map({\n  providerId: providerId => !!providerId ? '' + providerId : null,\n  providerUrl: providerUrl => !!providerUrl ? '' + providerUrl : null,\n  title: title => !!title ? '' + title : null,\n  tabsById: tabsById => new Map(tabsById).map(tab => new Tab(tab))\n}));\n\nexport default class Sheet extends SheetRecord {\n  constructor(params) {\n    const tabs = params && Iterable.isIterable(params)\n               ? params.get('tabs')\n               : params.tabs;\n\n    super(\n      coercer(\n        tabs\n          ? new Map(params).merge({\n            tabsById: new List(tabs).groupBy(t => t.get('id'))\n                                    .map(t => t.first())\n          }) : params\n      )\n    );\n  }\n\n  /**\n   * Return all cell references for all tabs.\n   **/\n  allCellRefs() {\n    return this.tabsById.valueSeq().flatMap(tab => (\n      tab.rows.flatMap((row, rowIdx) => (\n        row.map((cell, colIdx) => CellRef.of(tab, rowIdx, colIdx))\n      ))\n    ));\n  }\n\n  /**\n   * Returns the sheety-model Cell for the given cell ref.\n   **/\n  getCell(cellRef) {\n    const tab = this.getIn(['tabsById', cellRef.get('tabId')]);\n    return tab && tab.getCellByRef(cellRef);\n  }\n\n  getTab(tabId) {\n    return this.getIn(['tabsById', tabId]);\n  }\n\n  mapRange(cellRefRange, xform) {\n    return cellRefRange.mapCellRefs(xform);\n  }\n}\n"]}