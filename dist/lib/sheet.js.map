{"version":3,"sources":["../../src/lib/sheet.js"],"names":["SheetRecord","tabsById","Sheet","tabs","groupBy","t","get","map","first","valueSeq","flatMap","tab","rows","row","rowIdx","cell","colIdx","of","cellRef","getIn","getCellByRef","tabId"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,cAAc,uBAAO;AACzBC,YAAU;AADe,CAAP,EAEjB,OAFiB,CAApB;;IAIqBC,K;;;AACnB,uBAAgC;AAAA,QAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,QAAZF,QAAY,QAAZA,QAAY;;AAAA;;AAAA,yGAE1B,CAACA,QAAD,IAAa,CAAC,CAAEE,IAAlB,GACE;AACAF,gBAAU,oBAASE,IAAT,EAAeC,OAAf,CAAuB;AAAA,eAAKC,EAAEC,GAAF,CAAM,IAAN,CAAL;AAAA,OAAvB,EAAyCC,GAAzC,CAA6C;AAAA,eAAKF,EAAEG,KAAF,EAAL;AAAA,OAA7C;AADV,KADF,GAGI;AACFP;AADE,KALwB;AAS/B;;AAED;;;;;;;kCAGc;AACZ,aAAO,KAAKA,QAAL,CAAcQ,QAAd,GAAyBC,OAAzB,CAAiC;AAAA,eACtCC,IAAIC,IAAJ,CAASF,OAAT,CAAiB,UAACG,GAAD,EAAMC,MAAN;AAAA,iBACfD,IAAIN,GAAJ,CAAQ,UAACQ,IAAD,EAAOC,MAAP;AAAA,mBAAkB,kBAAQC,EAAR,CAAWN,GAAX,EAAgBG,MAAhB,EAAwBE,MAAxB,CAAlB;AAAA,WAAR,CADe;AAAA,SAAjB,CADsC;AAAA,OAAjC,CAAP;AAKD;;AAED;;;;;;4BAGQE,O,EAAS;AACf,UAAMP,MAAM,KAAKQ,KAAL,CAAW,CAAC,UAAD,EAAaD,QAAQZ,GAAR,CAAY,OAAZ,CAAb,CAAX,CAAZ;AACA,aAAOK,OAAOA,IAAIS,YAAJ,CAAiBF,OAAjB,CAAd;AACD;;;2BAEMG,K,EAAO;AACZ,aAAO,KAAKF,KAAL,CAAW,CAAC,UAAD,EAAaE,KAAb,CAAX,CAAP;AACD;;;;EAjCgCrB,W;;kBAAdE,K","file":"sheet.js","sourcesContent":["import { Record, Map, List } from 'immutable';\nimport Tab from './tab';\nimport CellRef from './cell-ref';\n\nconst SheetRecord = Record({\n  tabsById: new Map()\n}, 'Sheet');\n\nexport default class Sheet extends SheetRecord {\n  constructor({ tabs, tabsById }) {\n    super(\n      ( !tabsById && !! tabs )\n      ? {\n        tabsById: new List(tabs).groupBy(t => t.get('id')).map(t => t.first())\n      } : {\n        tabsById\n      }\n    );\n  }\n\n  /**\n   * Return all cell references for all tabs.\n   **/\n  allCellRefs() {\n    return this.tabsById.valueSeq().flatMap(tab => (\n      tab.rows.flatMap((row, rowIdx) => (\n        row.map((cell, colIdx) => CellRef.of(tab, rowIdx, colIdx))\n      ))\n    ));\n  }\n\n  /**\n   * Returns the sheety-model Cell for the given cell ref.\n   **/\n  getCell(cellRef) {\n    const tab = this.getIn(['tabsById', cellRef.get('tabId')]);\n    return tab && tab.getCellByRef(cellRef);\n  }\n\n  getTab(tabId) {\n    return this.getIn(['tabsById', tabId]);\n  }\n}\n"]}