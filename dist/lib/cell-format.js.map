{"version":3,"sources":["../../src/lib/cell-format.js"],"names":["types","Object","freeze","TEXT","NUMBER","PERCENT","CURRENCY","DATE","TIME","DATE_TIME","SCIENTIFIC","toJSValue","val","format","toNum","toStr","toFormatableValue","userEnteredValueToSheetValue","match","exec","NaN","parseFloat","diff","CellFormatRecord","type","pattern","coercer","bind","CellFormat","params","valueOf","get","userEnteredValue","Types"],"mappings":"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","file":"cell-format.js","sourcesContent":["import { Map, Record } from 'immutable';\nimport ssf from 'ssf';\nimport moment from 'moment';\nimport coerce from './coerce';\n\nconst types = Object.freeze({\n  TEXT: 'TEXT',\n  NUMBER: 'NUMBER',\n  PERCENT: 'PERCENT',\n  CURRENCY: 'CURRENCY',\n  DATE: 'DATE',\n  TIME: 'TIME',\n  DATE_TIME: 'DATE_TIME',\n  SCIENTIFIC: 'SCIENTIFIC'\n});\n\nconst toJSValue = Object.freeze({\n  TEXT: (val) => '' + val,\n  NUMBER: (val) => +val,\n  PERCENT: (val) => +val,\n  CURRENCY: (val) => +val,\n  DATE: (val) => moment(ssf.format('yyyy-mm-dd hh:mm:ss', val), 'YYYY-MM-DD HH:mm:ss'),\n  TIME: (val) => moment(ssf.format('yyyy-mm-dd hh:mm:ss', val), 'YYYY-MM-DD HH:mm:ss'), // TODO: is this right?\n  DATE_TIME: (val) => moment(ssf.format('yyyy-mm-dd hh:mm:ss', val), 'YYYY-MM-DD HH:mm:ss'),\n  SCIENTIFIC: (val) => +val\n});\n\nconst toNum = (val) => +val;\nconst toStr = (val) => '' + val;\n\nconst toFormatableValue = Object.freeze({\n  TEXT: toStr,\n  NUMBER: toNum,\n  PERCENT: toNum,\n  CURRENCY: toNum,\n  DATE: toNum,\n  TIME: toNum,\n  DATE_TIME: toNum,\n  SCIENTIFIC: toNum\n});\n\nconst userEnteredValueToSheetValue = Object.freeze({\n  TEXT: (val) => '' + val,\n  NUMBER: (val) => +val,\n  PERCENT: (val) => 100 * (+val),\n  CURRENCY: (val) => {\n    const match = /[0-9]*[.,][0-9]*/.exec('' + val);\n    if ( !match ) {\n      return NaN;\n    }\n    return parseFloat(match[0]);\n  },\n  DATE: (val) => moment(val).diff(moment('1899-12-30'), 'days'),\n  TIME: (val) => moment(val), // TODO: is this right?\n  DATE_TIME: (val) => moment(val).diff(moment('1899-12-30')) / 86400000,\n  SCIENTIFIC: (val) => +val\n});\n\nconst CellFormatRecord = Record({\n  type: types.TEXT,\n  pattern: ''\n});\n\nconst coercer = coerce.bind(null, new Map({\n  type: (type) => !!type && !!types[type] ? type : types.TEXT,\n  pattern: (pattern) => !!pattern ? pattern : ''\n}));\n\nexport default class CellFormat extends CellFormatRecord {\n  constructor(params) {\n    super(coercer(params));\n  }\n\n  format(val) {\n    const valueOf = toFormatableValue[this.get('type')];\n    return valueOf\n         ? ssf.format(this.get('pattern'), valueOf(val))\n         : val;\n  }\n\n  toJSValue(val) {\n    const valueOf = toJSValue[this.get('type')];\n    return valueOf ? valueOf(val) : val;\n  }\n\n  fromUserEnteredValue(userEnteredValue) {\n    const valueOf = userEnteredValueToSheetValue[this.get('type')];\n    return valueOf\n         ? valueOf(userEnteredValue)\n         : userEnteredValue;\n  }\n}\n\nCellFormat.Types = types;\n"]}