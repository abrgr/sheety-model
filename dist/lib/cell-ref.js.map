{"version":3,"sources":["../../src/lib/cell-ref.js"],"names":["CellRefRecord","tabId","rowIdx","colIdx","CellRef","params","isIterable","get","index","tab","ref","row","col"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,gBAAgB,uBAAO;AAC3BC,SAAO,IADoB;AAE3BC,UAAQ,IAFmB;AAG3BC,UAAQ;AAHmB,CAAP,CAAtB;;IAMqBC,O;;;AACnB,mBAAYC,MAAZ,EAAoB;AAAA;;AAAA,eACc,oBAASC,UAAT,CAAoBD,MAApB,IACA,CAACA,OAAOE,GAAP,CAAW,OAAX,CAAD,EAAsBF,OAAOE,GAAP,CAAW,QAAX,CAAtB,EAA4CF,OAAOE,GAAP,CAAW,QAAX,CAA5C,CADA,GAEA,CAACF,OAAOJ,KAAR,EAAeI,OAAOH,MAAtB,EAA8BG,OAAOF,MAArC,CAHd;AAAA;AAAA,QACXF,KADW;AAAA,QACJC,MADI;AAAA,QACIC,MADJ;;AAAA,6GAIZ;AACJF,aAAO,CAAC,CAACA,KAAF,GAAW,KAAKA,KAAhB,GAAyB,IAD5B;AAEJC,cAAQ,IAAEA,MAFN;AAGJC,cAAQ,IAAEA;AAHN,KAJY;AASnB;;;;8BAkCS;AACR,aAAO,+BACL,EAAEK,OAAO,KAAKD,GAAL,CAAS,QAAT,CAAT,EADK,EAEL,EAAEC,OAAO,KAAKD,GAAL,CAAS,QAAT,CAAT,EAFK,EAGL,KAAKA,GAAL,CAAS,OAAT,CAHK,CAAP;AAKD;;;oCAtCsBE,G,EAAKC,G,EAAK;AAAA,0BACZ,oCAAaA,GAAb,CADY;AAAA;AAAA,UACxBC,GADwB;AAAA,UACnBC,GADmB;;AAE/B,UAAMV,SAASS,IAAIH,KAAnB;AACA,UAAML,SAASS,IAAIJ,KAAnB;;AAEA,aAAO,IAAIJ,OAAJ,CAAY;AACjBF,sBADiB;AAEjBC,sBAFiB;AAGjBF,eAAOQ,IAAIF,GAAJ,CAAQ,IAAR;AAHU,OAAZ,CAAP;AAKD;;;8BAEgBG,G,EAAK;AAAA,2BACM,oCAAaA,GAAb,CADN;AAAA;AAAA,UACbC,GADa;AAAA,UACRC,GADQ;AAAA,UACHX,KADG;;AAEpB,UAAMC,SAASS,IAAIH,KAAnB;AACA,UAAML,SAASS,IAAIJ,KAAnB;;AAEA,aAAO,IAAIJ,OAAJ,CAAY;AACjBF,sBADiB;AAEjBC,sBAFiB;AAGjBF;AAHiB,OAAZ,CAAP;AAKD;;;uBAESQ,G,EAAKP,M,EAAQC,M,EAAQ;AAC7B,aAAO,IAAIC,OAAJ,CAAY;AACjBH,eAAOQ,IAAIF,GAAJ,CAAQ,IAAR,CADU;AAEjBL,sBAFiB;AAGjBC;AAHiB,OAAZ,CAAP;AAKD;;;;EA1CkCH,a;;kBAAhBI,O","file":"cell-ref.js","sourcesContent":["import { Record, Iterable } from 'immutable';\nimport { extractLabel, toLabel } from 'hot-formula-parser';\n\nconst CellRefRecord = Record({\n  tabId: null,\n  rowIdx: null,\n  colIdx: null\n});\n\nexport default class CellRef extends CellRefRecord {\n  constructor(params) {\n    const [tabId, rowIdx, colIdx] = Iterable.isIterable(params)\n                                  ? [params.get('tabId'), params.get('rowIdx'), params.get('colIdx')]\n                                  : [params.tabId, params.rowIdx, params.colIdx];\n    super({\n      tabId: !!tabId ? ('' + tabId) : null, \n      rowIdx: 0|rowIdx,\n      colIdx: 0|colIdx\n    });\n  }\n\n  static fromTabAndA1Ref(tab, ref) {\n    const [row, col] = extractLabel(ref);\n    const rowIdx = row.index;\n    const colIdx = col.index;\n\n    return new CellRef({\n      rowIdx,\n      colIdx,\n      tabId: tab.get('id')\n    });\n  }\n\n  static fromA1Ref(ref) {\n    const [row, col, tabId] = extractLabel(ref);\n    const rowIdx = row.index;\n    const colIdx = col.index;\n\n    return new CellRef({\n      rowIdx,\n      colIdx,\n      tabId\n    });\n  }\n\n  static of(tab, rowIdx, colIdx) {\n    return new CellRef({\n      tabId: tab.get('id'),\n      rowIdx,\n      colIdx\n    });\n  }\n\n  toA1Ref() {\n    return toLabel(\n      { index: this.get('rowIdx') },\n      { index: this.get('colIdx') },\n      this.get('tabId')\n    );\n  }\n}\n"]}