{"version":3,"sources":["../../src/lib/cell-ref.js"],"names":["CellRefRecord","tabId","rowIdx","colIdx","coercer","bind","CellRef","params","index","get","fn","tab","ref","row","col"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,uBAAO;AAC3BC,SAAO,IADoB;AAE3BC,UAAQ,IAFmB;AAG3BC,UAAQ;AAHmB,CAAP,CAAtB;;AAMA,IAAMC,UAAU,iBAAOC,IAAP,CAAY,IAAZ,EAAkB,mBAAQ;AACxCJ,SAAO,eAACA,MAAD;AAAA,WAAWA,SAAS,KAAKA,MAAd,GAAuB,IAAlC;AAAA,GADiC;AAExCC,UAAQ,gBAACA,OAAD;AAAA,WAAY,IAAEA,OAAd;AAAA,GAFgC;AAGxCC,UAAQ,gBAACA,OAAD;AAAA,WAAY,IAAEA,OAAd;AAAA;AAHgC,CAAR,CAAlB,CAAhB;;IAMqBG,O;;;AACnB,mBAAYC,MAAZ,EAAoB;AAAA;;AAAA,6GACZH,QAAQG,MAAR,CADY;AAEnB;;;;8BAkCS;AACR,aAAO,+BACL,EAAEC,OAAO,KAAKC,GAAL,CAAS,QAAT,CAAT,EADK,EAEL,EAAED,OAAO,KAAKC,GAAL,CAAS,QAAT,CAAT,EAFK,EAGL,KAAKA,GAAL,CAAS,OAAT,CAHK,CAAP;AAKD;;;8BAESC,E,EAAI;AACZ,UAAK,KAAKD,GAAL,CAAS,OAAT,CAAL,EAAyB;AACvB,eAAOC,GAAG,KAAKD,GAAL,CAAS,OAAT,CAAH,EAAsB,KAAKA,GAAL,CAAS,QAAT,CAAtB,EAA0C,KAAKA,GAAL,CAAS,QAAT,CAA1C,CAAP;AACD;AACF;;;oCA5CsBE,G,EAAKC,G,EAAK;AAAA,0BACZ,oCAAaA,GAAb,CADY;AAAA;AAAA,UACxBC,GADwB;AAAA,UACnBC,GADmB;;AAE/B,UAAMZ,SAASW,IAAIL,KAAnB;AACA,UAAML,SAASW,IAAIN,KAAnB;;AAEA,aAAO,IAAIF,OAAJ,CAAY;AACjBJ,sBADiB;AAEjBC,sBAFiB;AAGjBF,eAAOU,IAAIF,GAAJ,CAAQ,IAAR;AAHU,OAAZ,CAAP;AAKD;;;8BAEgBG,G,EAAK;AAAA,2BACM,oCAAaA,GAAb,CADN;AAAA;AAAA,UACbC,GADa;AAAA,UACRC,GADQ;AAAA,UACHb,KADG;;AAEpB,UAAMC,SAASW,IAAIL,KAAnB;AACA,UAAML,SAASW,IAAIN,KAAnB;;AAEA,aAAO,IAAIF,OAAJ,CAAY;AACjBJ,sBADiB;AAEjBC,sBAFiB;AAGjBF;AAHiB,OAAZ,CAAP;AAKD;;;uBAESU,G,EAAKT,M,EAAQC,M,EAAQ;AAC7B,aAAO,IAAIG,OAAJ,CAAY;AACjBL,eAAOU,IAAIF,GAAJ,CAAQ,IAAR,CADU;AAEjBP,sBAFiB;AAGjBC;AAHiB,OAAZ,CAAP;AAKD;;;;EAnCkCH,a;;kBAAhBM,O","file":"cell-ref.js","sourcesContent":["import { Map, Record } from 'immutable';\nimport { extractLabel, toLabel } from 'hot-formula-parser';\nimport coerce from './coerce';\n\nconst CellRefRecord = Record({\n  tabId: null,\n  rowIdx: null,\n  colIdx: null\n});\n\nconst coercer = coerce.bind(null, new Map({\n  tabId: (tabId) => tabId ? ('' + tabId) : null,\n  rowIdx: (rowIdx) => 0|rowIdx,\n  colIdx: (colIdx) => 0|colIdx\n}));\n\nexport default class CellRef extends CellRefRecord {\n  constructor(params) {\n    super(coercer(params));\n  }\n\n  static fromTabAndA1Ref(tab, ref) {\n    const [row, col] = extractLabel(ref);\n    const rowIdx = row.index;\n    const colIdx = col.index;\n\n    return new CellRef({\n      rowIdx,\n      colIdx,\n      tabId: tab.get('id')\n    });\n  }\n\n  static fromA1Ref(ref) {\n    const [row, col, tabId] = extractLabel(ref);\n    const rowIdx = row.index;\n    const colIdx = col.index;\n\n    return new CellRef({\n      rowIdx,\n      colIdx,\n      tabId\n    });\n  }\n\n  static of(tab, rowIdx, colIdx) {\n    return new CellRef({\n      tabId: tab.get('id'),\n      rowIdx,\n      colIdx\n    });\n  }\n\n  toA1Ref() {\n    return toLabel(\n      { index: this.get('rowIdx') },\n      { index: this.get('colIdx') },\n      this.get('tabId')\n    );\n  }\n\n  whenValid(fn) {\n    if ( this.get('tabId') ) {\n      return fn(this.get('tabId'), this.get('colIdx'), this.get('rowIdx'));\n    }\n  }\n}\n"]}