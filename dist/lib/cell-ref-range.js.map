{"version":3,"sources":["../../src/lib/cell-ref-range.js"],"names":["CellRefRangeRecord","start","end","coercer","bind","CellRefRange","params","xform","get","tab","rows","cols","vals","r","push","c","merge","rowIdx","colIdx","startRow","startCol","endRow","endCol","of","ref","lastColonIdx","lastIndexOf","from","slice","to","fromA1Ref","set"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,qBAAqB,uBAAO;AAChCC,SAAO,IADyB;AAEhCC,OAAK;AAF2B,CAAP,CAA3B;;AAKA,IAAMC,UAAU,iBAAOC,IAAP,CAAY,IAAZ,EAAkB,mBAAQ;AACxCH,SAAO,eAACA,MAAD;AAAA,WAAW,sBAAYA,MAAZ,CAAX;AAAA,GADiC;AAExCC,OAAK,aAACA,IAAD;AAAA,WAAS,sBAAYA,IAAZ,CAAT;AAAA;AAFmC,CAAR,CAAlB,CAAhB;;IAKqBG,Y;;;AACnB,wBAAYC,MAAZ,EAAoB;AAAA;;AAAA,uHACZH,QAAQG,MAAR,CADY;AAEnB;;;;wBAyBGC,K,EAAO;AACT,UAAMN,QAAQ,KAAKO,GAAL,CAAS,OAAT,CAAd;AACA,UAAMN,MAAM,KAAKM,GAAL,CAAS,KAAT,CAAZ;AACA,UAAMC,MAAMR,MAAMO,GAAN,CAAU,OAAV,CAAZ;AACA,UAAME,OAAOR,IAAIM,GAAJ,CAAQ,QAAR,IAAoBP,MAAMO,GAAN,CAAU,QAAV,CAAjC;AACA,UAAMG,OAAOT,IAAIM,GAAJ,CAAQ,QAAR,IAAoBP,MAAMO,GAAN,CAAU,QAAV,CAAjC;;AAEA,UAAMI,OAAO,EAAb;AACA,WAAM,IAAIC,IAAI,CAAd,EAAiBA,KAAKH,IAAtB,EAA4B,EAAEG,CAA9B,EAAkC;AAChCD,aAAKE,IAAL,CAAU,EAAV;AACA,aAAM,IAAIC,IAAI,CAAd,EAAiBA,KAAKJ,IAAtB,EAA4B,EAAEI,CAA9B,EAAkC;AAChCH,eAAKC,CAAL,EAAQE,CAAR,IAAaR,MAAMN,MAAMe,KAAN,CAAY,EAACC,QAAQJ,CAAT,EAAYK,QAAQH,CAApB,EAAZ,CAAN,CAAb;AACD;AACF;;AAED,aAAOH,IAAP;AACD;;;uBAvCSH,G,EAAKU,Q,EAAUC,Q,EAAUC,M,EAAQC,M,EAAQ;AACjD,aAAO,IAAIjB,YAAJ,CAAiB;AACtBJ,eAAO,kBAAQsB,EAAR,CAAWd,GAAX,EAAgBU,QAAhB,EAA0BC,QAA1B,CADe;AAEtBlB,aAAK,kBAAQqB,EAAR,CAAWd,GAAX,EAAgBY,MAAhB,EAAwBC,MAAxB;AAFiB,OAAjB,CAAP;AAID;;;8BAEgBE,G,EAAK;AACpB;AACA;AACA,UAAMC,eAAeD,IAAIE,WAAJ,CAAgB,GAAhB,CAArB;AACA,UAAMC,OAAOH,IAAII,KAAJ,CAAU,CAAV,EAAaH,YAAb,CAAb;AACA,UAAMI,KAAKL,IAAII,KAAJ,CAAUH,eAAe,CAAzB,CAAX;;AAEA,UAAMxB,QAAQ,kBAAQ6B,SAAR,CAAkBH,IAAlB,CAAd;AACA,UAAMzB,MAAM,kBAAQ4B,SAAR,CAAkBD,EAAlB,EAAsBE,GAAtB,CAA0B,OAA1B,EAAmC9B,MAAMO,GAAN,CAAU,OAAV,CAAnC,CAAZ;;AAEA,aAAO,IAAIH,YAAJ,CAAiB;AACtBJ,oBADsB;AAEtBC;AAFsB,OAAjB,CAAP;AAID;;;;EA1BuCF,kB;;kBAArBK,Y","file":"cell-ref-range.js","sourcesContent":["import { Map, Record } from 'immutable';\nimport CellRef from './cell-ref';\nimport coerce from './coerce';\n\nconst CellRefRangeRecord = Record({\n  start: null,\n  end: null\n});\n\nconst coercer = coerce.bind(null, new Map({\n  start: (start) => new CellRef(start),\n  end: (end) => new CellRef(end)\n}));\n\nexport default class CellRefRange extends CellRefRangeRecord {\n  constructor(params) {\n    super(coercer(params));\n  }\n\n  static of(tab, startRow, startCol, endRow, endCol) {\n    return new CellRefRange({\n      start: CellRef.of(tab, startRow, startCol),\n      end: CellRef.of(tab, endRow, endCol)\n    });\n  }\n\n  static fromA1Ref(ref) {\n    // the structure of a ref is <tab><from ref>:<to ref>\n    // <tab> may include a colon so the final colon must be the separator\n    const lastColonIdx = ref.lastIndexOf(':');\n    const from = ref.slice(0, lastColonIdx);\n    const to = ref.slice(lastColonIdx + 1);\n\n    const start = CellRef.fromA1Ref(from);\n    const end = CellRef.fromA1Ref(to).set('tabId', start.get('tabId'));\n\n    return new CellRefRange({\n      start,\n      end\n    });\n  }\n\n  map(xform) {\n    const start = this.get('start');\n    const end = this.get('end');\n    const tab = start.get('tabId');\n    const rows = end.get('rowIdx') - start.get('rowIdx');\n    const cols = end.get('colIdx') - start.get('colIdx');\n\n    const vals = [];\n    for ( let r = 0; r <= rows; ++r ) {\n      vals.push([]);\n      for ( let c = 0; c <= cols; ++c ) {\n        vals[r][c] = xform(start.merge({rowIdx: r, colIdx: c}));\n      }\n    }\n\n    return vals;\n  }\n}\n"]}