{"version":3,"sources":["../../src/lib/tab.js"],"names":["TabRecord","id","name","isVisible","rows","Tab","params","isIterable","get","coerceRows","ref","getCellByRef","fromTabAndA1Ref","row","col","getIn","getCell","map","coerceRow","cell"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,uBAAO;AACvBC,MAAI,IADmB;AAEvBC,QAAM,IAFiB;AAGvBC,aAAW,KAHY;AAIvBC,QAAM;AAJiB,CAAP,EAKf,KALe,CAAlB;;IAOqBC,G;;;AACnB,eAAYC,MAAZ,EAAoB;AAAA;;AAAA,eAEd,oBAASC,UAAT,CAAoBD,MAApB,IACA,CAACA,OAAOE,GAAP,CAAW,IAAX,CAAD,EAAmBF,OAAOE,GAAP,CAAW,MAAX,CAAnB,EAAuCF,OAAOE,GAAP,CAAW,WAAX,CAAvC,EAAgEF,OAAOE,GAAP,CAAW,MAAX,CAAhE,CADA,GAEA,CAACF,OAAOL,EAAR,EAAYK,OAAOJ,IAAnB,EAAyBI,OAAOH,SAAhC,EAA2CG,OAAOF,IAAlD,CAJc;AAAA;AAAA,QACXH,EADW;AAAA,QACPC,IADO;AAAA,QACDC,SADC;AAAA,QACUC,IADV;;AAAA,qGAKZ;AACJH,UAAI,KAAKA,EADL;AAEJC,YAAM,KAAKA,IAFP;AAGJC,iBAAW,CAAC,CAACA,SAHT;AAIJC,YAAM,CAAC,CAACA,IAAF,GACAK,WAAWL,IAAX,CADA,GAEA;AANF,KALY;AAanB;;;;mCAEcM,G,EAAK;AAClB,aAAO,KAAKC,YAAL,CAAkB,kBAAQC,eAAR,CAAwB,IAAxB,EAA8BF,GAA9B,CAAlB,CAAP;AACD;;;4BAEOG,G,EAAKC,G,EAAK;AAChB,aAAO,KAAKC,KAAL,CAAW,CAAC,MAAD,EAASF,GAAT,EAAcC,GAAd,CAAX,CAAP;AACD;;;iCAEYJ,G,EAAK;AAChB,aAAOA,IAAIF,GAAJ,CAAQ,OAAR,MAAqB,KAAKA,GAAL,CAAS,IAAT,CAArB,GACA,KAAKQ,OAAL,CAAaN,IAAIF,GAAJ,CAAQ,QAAR,CAAb,EAAgCE,IAAIF,GAAJ,CAAQ,QAAR,CAAhC,CADA,GAEA,IAFP;AAGD;;;;EA5B8BR,S;;kBAAZK,G;;;AA+BrB,SAASI,UAAT,CAAoBL,IAApB,EAA0B;AACxB,SAAO,oBAASA,IAAT,EAAea,GAAf,CAAmB,UAACJ,GAAD;AAAA,WACxB,CAAC,CAACA,GAAF,GAAQK,UAAUL,GAAV,CAAR,GAAyB,qBADD;AAAA,GAAnB,CAAP;AAGD;;AAED,SAASK,SAAT,CAAmBL,GAAnB,EAAwB;AACtB,SAAO,oBAASA,GAAT,EAAcI,GAAd,CAAkB,UAACE,IAAD;AAAA,WACvB,CAAC,CAACA,IAAF,GAAS,mBAASA,IAAT,CAAT,GAA0B,oBADH;AAAA,GAAlB,CAAP;AAGD","file":"tab.js","sourcesContent":["import { Record, List, Iterable } from 'immutable';\nimport CellRef from './cell-ref';\nimport Cell from './cell';\n\nconst TabRecord = Record({\n  id: null,\n  name: null,\n  isVisible: false,\n  rows: new List()\n}, 'Tab');\n\nexport default class Tab extends TabRecord {\n  constructor(params) {\n    const [id, name, isVisible, rows]\n      = Iterable.isIterable(params)\n      ? [params.get('id'), params.get('name'), params.get('isVisible'), params.get('rows')]\n      : [params.id, params.name, params.isVisible, params.rows];\n    super({\n      id: '' + id,\n      name: '' + name,\n      isVisible: !!isVisible,\n      rows: !!rows\n          ? coerceRows(rows)\n          : new List()\n    });\n  }\n\n  getCellByA1Ref(ref) {\n    return this.getCellByRef(CellRef.fromTabAndA1Ref(this, ref));\n  }\n\n  getCell(row, col) {\n    return this.getIn(['rows', row, col]);\n  }\n\n  getCellByRef(ref) {\n    return ref.get('tabId') === this.get('id')\n         ? this.getCell(ref.get('rowIdx'), ref.get('colIdx'))\n         : null;\n  }\n}\n\nfunction coerceRows(rows) {\n  return new List(rows).map((row) => (\n    !!row ? coerceRow(row) : new List()\n  ));\n}\n\nfunction coerceRow(row) {\n  return new List(row).map((cell) => ( \n    !!cell ? new Cell(cell) : new Cell()\n  ));\n}\n"]}