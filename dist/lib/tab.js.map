{"version":3,"sources":["../../src/lib/tab.js"],"names":["TabRecord","id","name","isVisible","rows","coercer","bind","coerceRows","Tab","params","ref","getCellByRef","fromTabAndA1Ref","row","col","getIn","get","getCell","map","coerceRow","cell"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,uBAAO;AACvBC,MAAI,IADmB;AAEvBC,QAAM,IAFiB;AAGvBC,aAAW,KAHY;AAIvBC,QAAM;AAJiB,CAAP,EAKf,KALe,CAAlB;;AAOA,IAAMC,UAAU,iBAAOC,IAAP,CAAY,IAAZ,EAAkB,mBAAQ;AACxCL,MAAI;AAAA,WAAM,KAAKA,GAAX;AAAA,GADoC;AAExCC,QAAM;AAAA,WAAQ,KAAKA,KAAb;AAAA,GAFkC;AAGxCC,aAAW;AAAA,WAAa,CAAC,CAACA,UAAf;AAAA,GAH6B;AAIxCC,QAAM;AAAA,WAAQ,CAAC,CAACA,KAAF,GAASG,WAAWH,KAAX,CAAT,GAA4B,qBAApC;AAAA;AAJkC,CAAR,CAAlB,CAAhB;;IAOqBI,G;;;AACnB,eAAYC,MAAZ,EAAoB;AAAA;;AAAA,qGACZJ,QAAQI,MAAR,CADY;AAEnB;;;;mCAEcC,G,EAAK;AAClB,aAAO,KAAKC,YAAL,CAAkB,kBAAQC,eAAR,CAAwB,IAAxB,EAA8BF,GAA9B,CAAlB,CAAP;AACD;;;4BAEOG,G,EAAKC,G,EAAK;AAChB,aAAO,KAAKC,KAAL,CAAW,CAAC,MAAD,EAASF,GAAT,EAAcC,GAAd,CAAX,CAAP;AACD;;;iCAEYJ,G,EAAK;AAChB,aAAOA,IAAIM,GAAJ,CAAQ,OAAR,MAAqB,KAAKA,GAAL,CAAS,IAAT,CAArB,GACA,KAAKC,OAAL,CAAaP,IAAIM,GAAJ,CAAQ,QAAR,CAAb,EAAgCN,IAAIM,GAAJ,CAAQ,QAAR,CAAhC,CADA,GAEA,IAFP;AAGD;;;;EAjB8BhB,S;;kBAAZQ,G;;;AAoBrB,SAASD,UAAT,CAAoBH,IAApB,EAA0B;AACxB,SAAO,oBAASA,IAAT,EAAec,GAAf,CAAmB,UAACL,GAAD;AAAA,WACxB,CAAC,CAACA,GAAF,GAAQM,UAAUN,GAAV,CAAR,GAAyB,qBADD;AAAA,GAAnB,CAAP;AAGD;;AAED,SAASM,SAAT,CAAmBN,GAAnB,EAAwB;AACtB,SAAO,oBAASA,GAAT,EAAcK,GAAd,CAAkB,UAACE,IAAD;AAAA,WACvB,CAAC,CAACA,IAAF,GAAS,mBAASA,IAAT,CAAT,GAA0B,oBADH;AAAA,GAAlB,CAAP;AAGD","file":"tab.js","sourcesContent":["import { Map, Record, List } from 'immutable';\nimport CellRef from './cell-ref';\nimport Cell from './cell';\nimport coerce from './coerce';\n\nconst TabRecord = Record({\n  id: null,\n  name: null,\n  isVisible: false,\n  rows: new List()\n}, 'Tab');\n\nconst coercer = coerce.bind(null, new Map({\n  id: id => '' + id,\n  name: name => '' + name,\n  isVisible: isVisible => !!isVisible,\n  rows: rows => !!rows ? coerceRows(rows) : new List()\n}));\n\nexport default class Tab extends TabRecord {\n  constructor(params) {\n    super(coercer(params));\n  }\n\n  getCellByA1Ref(ref) {\n    return this.getCellByRef(CellRef.fromTabAndA1Ref(this, ref));\n  }\n\n  getCell(row, col) {\n    return this.getIn(['rows', row, col]);\n  }\n\n  getCellByRef(ref) {\n    return ref.get('tabId') === this.get('id')\n         ? this.getCell(ref.get('rowIdx'), ref.get('colIdx'))\n         : null;\n  }\n}\n\nfunction coerceRows(rows) {\n  return new List(rows).map((row) => (\n    !!row ? coerceRow(row) : new List()\n  ));\n}\n\nfunction coerceRow(row) {\n  return new List(row).map((cell) => ( \n    !!cell ? new Cell(cell) : new Cell()\n  ));\n}\n"]}